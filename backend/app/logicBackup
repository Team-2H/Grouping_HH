
# 최초 로직
# def constrained_kmeans(data, max_elements_per_cluster, min_elements_per_cluster):
#     # 클러스터 수 결정
#     n_samples = data.shape[0]
#     n_clusters = n_samples // max_elements_per_cluster
#     kmeans = KMeans(n_clusters=n_clusters)
#     kmeans.fit(data)
#     labels = kmeans.labels_
#     unique_labels = set(labels)
#     counts = np.bincount(labels)

#     # 최대값 제한 처리
#     for label in unique_labels:
#         if counts[label] > max_elements_per_cluster:
#             excess_indices = np.where(labels == label)[0]
#             excess_indices = excess_indices[max_elements_per_cluster:]

#             # 가장 가까운 클러스터를 찾아 이동
#             for idx in excess_indices:
#                 distances = np.linalg.norm(data[idx] - kmeans.cluster_centers_, axis=1)
#                 sorted_indices = np.argsort(distances)
#                 for new_label in sorted_indices:
#                     if counts[new_label] < max_elements_per_cluster:
#                         labels[idx] = new_label
#                         counts[label] -= 1
#                         counts[new_label] += 1
#                         break
    
#     # 최소값 제한 처리
#     for label in unique_labels:
#         if counts[label] < min_elements_per_cluster:
#             deficit_indices = np.where(labels == label)[0]
            
#             # 가장 가까운 클러스터로부터 원소를 가져옴
#             for idx in deficit_indices:
#                 distances = np.linalg.norm(data[idx] - kmeans.cluster_centers_, axis=1)
#                 sorted_indices = np.argsort(distances)
#                 for new_label in sorted_indices:
#                     if counts[new_label] > min_elements_per_cluster:
#                         labels[idx] = new_label
#                         counts[label] += 1
#                         counts[new_label] -= 1
#                         if counts[label] >= min_elements_per_cluster:
#                             break
#                 if counts[label] >= min_elements_per_cluster:
#                     break
    
#     return labels